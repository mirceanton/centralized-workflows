---
name: Docker Cleanup

on:
  workflow_call:
    inputs:
      image-name:
        type: string
        description: The name of the image to clean up.
        default: ""
        required: true
      image-tag-regex:
        type: string
        description: The regex to match image tags.
        default: ""
        required: false
      delete-untagged:
        type: boolean
        description: Delete untagged images.
        default: false
        required: false
      dry-run:
        type: boolean
        description: Do not delete images.
        default: false
        required: false

jobs:
  docker-cleanup:
    runs-on: ubuntu-latest

    steps:
      - name: Generate Token
        uses: actions/create-github-app-token@31c86eb3b33c9b601a1f60f98dcbfd1d70f379b4 # v1.10.3
        id: app-token
        with:
          app-id: "${{ secrets.BOT_APP_ID }}"
          private-key: "${{ secrets.BOT_APP_PRIVATE_KEY }}"

      - name: Delete Tagged Images
        if: ${{ inputs.image-tag-regex != '' }}
        uses: stumpylog/image-cleaner-action/ephemeral@v0.8.0
        with:
          token: "${{ steps.app-token.outputs.token }}"
          repo_name: "${{ github.repository }}"
          package_name: "${{ inputs.image-name }}"
          match_regex: "${{ inputs.image-tag-regex }}"
          scheme: "pull_request"
          do_delete: "${{ inputs.dry-run == false }}"
          owner: "${{ github.repository_owner }}"
          is_org: "true"

      - name: Delete Untagged Images
        if: ${{ inputs.delete-untagged == true }}
        uses: stumpylog/image-cleaner-action/untagged@v0.8.0
        with:
          token: "${{ steps.app-token.outputs.token }}"
          package_name: "${{ inputs.image-name }}"
          do_delete: "${{ inputs.dry-run == false }}"
          owner: "${{ github.repository_owner }}"
          is_org: "true"
